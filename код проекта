import yfinance as yf
import logging
import io
import matplotlib.pyplot as plt
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
import pandas as pd
import numpy as np

# ==================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ====================
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ==================== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç–∏ ====================
LANGUAGES = {
    "en": {
        "welcome": "üìà Stock Dividend Bot\nType /help for commands",
        "no_args": "Please enter a stock symbol, e.g.: /dividend AAPL",
        "fetching": "Fetching {symbol} data...",
        "no_data": "{symbol} has no dividend data",
        "dividend_info": "üè¶ Company: {name}\nüí∞ Price: {price}\nüìà Yield: {yield_pct}%\n\nRecent dividends:",
        "chart_btn": "View Chart",
        "error": "Data fetch failed",
        "lang_set": "Language set to English",
        "choose_lang": "Choose language:",
        "portfolio_empty": "Your portfolio is empty",
        "portfolio_header": "üìä Your Portfolio:\n",
        "lesson_menu": "Choose a lesson:",
        "risk_info": "üìä {symbol} Risk\nVolatility: {volatility:.2%}\nRisk: {risk_level}",
        "help_text": """üìö <b>Help</b>

<u>Core</u>
/start - Show welcome
/help - This guide
/language - Change language
/dividend &lt;symbol&gt; - Dividend info

<u>Portfolio</u>
/add &lt;symbol&gt; - Add stock
/portfolio - View portfolio

<u>Analysis</u>
/risk &lt;symbol&gt; - Risk analysis

<u>Education</u>
/learn - Investment lessons""",
        "help_portfolio": "üì¶ <b>Portfolio Help</b>\n\n/add to add stocks\n/portfolio to view",
        "help_risk": "‚ö†Ô∏è <b>Risk Help</b>\n\n/risk calculates stock volatility",
        "help_dividend": "üí∞ <b>Dividend Help</b>\n\n/dividend shows last 4 payments"
    },
    
    "ru": {
        "welcome": "üìà –ë–æ—Ç –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤\n–ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è –∫–æ–º–∞–Ω–¥",
        "no_args": "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä: /dividend AAPL",
        "fetching": "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö {symbol}...",
        "no_data": "{symbol} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞—Ö",
        "dividend_info": "üè¶ –ö–æ–º–ø–∞–Ω–∏—è: {name}\nüí∞ –¶–µ–Ω–∞: {price}\nüìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {yield_pct}%\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–≤–∏–¥–µ–Ω–¥—ã:",
        "chart_btn": "–ì—Ä–∞—Ñ–∏–∫",
        "error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
        "lang_set": "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π",
        "choose_lang": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "portfolio_empty": "–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç",
        "portfolio_header": "üìä –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:\n",
        "lesson_menu": "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:",
        "risk_info": "üìä –†–∏—Å–∫ {symbol}\n–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.2%}\n–£—Ä–æ–≤–µ–Ω—å: {risk_level}",
        "help_text": """üìö <b>–ü–æ–º–æ—â—å</b>

<u>–û—Å–Ω–æ–≤–Ω–æ–µ</u>
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/language - –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
/dividend &lt;—Ç–∏–∫–µ—Ä&gt; - –ò–Ω—Ñ–æ –æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞—Ö

<u>–ü–æ—Ä—Ç—Ñ–µ–ª—å</u>
/add &lt;—Ç–∏–∫–µ—Ä&gt; - –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é
/portfolio - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å

<u>–ê–Ω–∞–ª–∏–∑</u>
/risk &lt;—Ç–∏–∫–µ—Ä&gt; - –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞

<u>–û–±—É—á–µ–Ω–∏–µ</u>
/learn - –£—Ä–æ–∫–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è""",
        "help_portfolio": "üì¶ <b>–ü–æ–º–æ—â—å –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é</b>\n\n/add –¥–æ–±–∞–≤–∏—Ç—å\n/portfolio –ø—Ä–æ—Å–º–æ—Ç—Ä",
        "help_risk": "‚ö†Ô∏è <b>–ü–æ–º–æ—â—å –ø–æ —Ä–∏—Å–∫—É</b>\n\n/risk —Ä–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏",
        "help_dividend": "üí∞ <b>–ü–æ–º–æ—â—å –ø–æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞–º</b>\n\n/dividend –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –≤—ã–ø–ª–∞—Ç—ã"
    }
}

# ==================== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ====================
user_data = {}  # {user_id: {'language': 'en', 'portfolio': []}}

# ==================== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è ====================
LESSONS = {
    1: {
        "title": {
            "en": "üìö Lesson 1: Dividends Basics",
            "ru": "üìö –£—Ä–æ–∫ 1: –û—Å–Ω–æ–≤—ã –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤"
        },
        "content": {
            "en": "Dividend: A portion of a company‚Äôs profit paid to shareholders.",
            "ru": "–î–∏–≤–∏–¥–µ–Ω–¥—ã: —á–∞—Å—Ç—å –ø—Ä–∏–±—ã–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏, –≤—ã–ø–ª–∞—á–∏–≤–∞–µ–º–∞—è –∞–∫—Ü–∏–æ–Ω–µ—Ä–∞–º."
        }
    },
    2: {
        "title": {
            "en": "üìà Lesson 2: Dividend Safety",
            "ru": "üìà –£—Ä–æ–∫ 2: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤"
        },
        "content": {
            "en": "Assess dividend safety using payout ratios.",
            "ru": "–û—Ü–µ–Ω–∏—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–ø–ª–∞—Ç."
        }
    }
}


# ==================== –Ø–¥—Ä–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    lang = user_data.get(user_id, {}).get('language', 'en')
    await update.message.reply_text(LANGUAGES[lang]["welcome"])


async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞"""
    user_id = update.effective_user.id
    lang = user_data.get(user_id, {}).get('language', 'en')

    buttons = [
        ["English", "–†—É—Å—Å–∫–∏–π"]
    ]
    await update.message.reply_text(
        LANGUAGES[lang]["choose_lang"],
        reply_markup=ReplyKeyboardMarkup(buttons, one_time_keyboard=True)
    )


async def handle_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    text = update.message.text
    lang_map = {"English": "en", "–†—É—Å—Å–∫–∏–π": "ru"}

    if text in lang_map:
        user_id = update.effective_user.id
        if user_id not in user_data:
            user_data[user_id] = {}
        user_data[user_id]['language'] = lang_map[text]
        await update.message.reply_text(
            LANGUAGES[lang_map[text]]["lang_set"],
            reply_markup=ReplyKeyboardRemove()
        )


# ==================== –§—É–Ω–∫—Ü–∏–∏ –ø–æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞–º ====================
async def dividend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤"""
    user_id = update.effective_user.id
    lang = user_data.get(user_id, {}).get('language', 'en')

    if not context.args:
        await update.message.reply_text(LANGUAGES[lang]["no_args"])
        return

    symbol = context.args[0].upper()
    await update.message.reply_text(LANGUAGES[lang]["fetching"].format(symbol=symbol))

    try:
        stock = yf.Ticker(symbol)
        dividends = stock.dividends

        if dividends.empty:
            await update.message.reply_text(LANGUAGES[lang]["no_data"].format(symbol=symbol))
            return

        info = stock.info
        dividend_yield = round(info.get('dividendYield', 0) * 100, 2)

        message = LANGUAGES[lang]["dividend_info"].format(
            name=info.get('longName', symbol),
            price=info.get('currentPrice', 'N/A'),
            yield_pct=dividend_yield
        )

        for date, amount in dividends.tail(4).items():
            message += f"\nüìÖ {date.date()}: ${amount:.2f}"

        keyboard = [[
            InlineKeyboardButton(
                LANGUAGES[lang]["chart_btn"],
                callback_data=f"chart_{lang}_{symbol}"
            )
        ]]
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text(LANGUAGES[lang]["error"])


async def dividend_chart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì—Ä–∞—Ñ–∏–∫ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤"""
    query = update.callback_query
    await query.answer()

    _, lang, symbol = query.data.split('_')
    stock = yf.Ticker(symbol)

    plt.figure(figsize=(10, 5))
    dividends = stock.dividends
    dividends.plot(kind='bar')
    plt.title(f"{symbol} Dividends")
    plt.ylabel("Amount ($)")
    plt.xticks(rotation=45)

    buf = io.BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close()

    await query.message.reply_photo(
        photo=buf,
        caption=f"{symbol} {LANGUAGES[lang]['chart_btn']}"
    )


# ==================== –ü–æ—Ä—Ç—Ñ–µ–ª—å ====================
async def add_to_portfolio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏–∏"""
    user_id = update.effective_user.id
    lang = user_data.get(user_id, {}).get('language', 'en')

    if not context.args:
        await update.message.reply_text("Usage: /add <symbol>")
        return

    symbol = context.args[0].upper()

    if user_id not in user_data:
        user_data[user_id] = {'portfolio': []}
    elif 'portfolio' not in user_data[user_id]:
        user_data[user_id]['portfolio'] = []

    if symbol not in user_data[user_id]['portfolio']:
        user_data[user_id]['portfolio'].append(symbol)
        await update.message.reply_text(f"‚úÖ {symbol} added to portfolio")
    else:
        await update.message.reply_text(f"‚ÑπÔ∏è {symbol} already in portfolio")


async def show_portfolio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    user_id = update.effective_user.id
    lang = user_data.get(user_id, {}).get('language', 'en')

    if user_id not in user_data or 'portfolio' not in user_data[user_id] or not user_data[user_id]['portfolio']:
        await update.message.reply_text(LANGUAGES[lang]["portfolio_empty"])
        return

    message = LANGUAGES[lang]["portfolio_header"]
    total_value = 0

    for symbol in user_data[user_id]['portfolio']:
        try:
            stock = yf.Ticker(symbol)
            price = stock.history(period='1d')['Close'].iloc[-1]
            message += f"\n{symbol}: ${price:.2f}"
            total_value += price
        except Exception as e:
            message += f"\n{symbol}: Error"
            logger.error(f"Price fetch failed: {e}")

    message += f"\n\nüíµ Total: ${total_value:.2f}"
    await update.message.reply_text(message)


# ==================== –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è ====================
async def start_education(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    lang = user_data.get(user_id, {}).get('language', 'en')

    keyboard = [
        [InlineKeyboardButton(LESSONS[num]['title'][lang], callback_data=f"lesson_{num}")]
        for num in LESSONS
    ]
    await update.message.reply_text(
        LANGUAGES[lang]["lesson_menu"],
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫"""
    query = update.callback_query
    await query.answer()

    lesson_num = int(query.data.split('_')[1])
    user_id = update.effective_user.id
    lang = user_data.get(user_id, {}).get('language', 'en')

    lesson = LESSONS[lesson_num]
    await query.edit_message_text(
        f"{lesson['title'][lang]}\n\n{lesson['content'][lang]}"
    )


# ==================== –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ ====================
async def analyze_risk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤"""
    user_id = update.effective_user.id
    lang = user_data.get(user_id, {}).get('language', 'en')

    if not context.args:
        await update.message.reply_text("Usage: /risk <symbol>")
        return

    symbol = context.args[0].upper()

    try:
        stock = yf.Ticker(symbol)
        hist = stock.history(period="1y")

        if hist.empty:
            await update.message.reply_text(f"No data for {symbol}")
            return

        returns = hist['Close'].pct_change().dropna()
        volatility = returns.std() * np.sqrt(252)

        if volatility > 0.3:
            risk_level = "High" if lang == "en" else "–í—ã—Å–æ–∫–∏–π"
        elif volatility > 0.15:
            risk_level = "Medium" if lang == "en" else "–°—Ä–µ–¥–Ω–∏–π"
        else:
            risk_level = "Low" if lang == "en" else "–ù–∏–∑–∫–∏–π"

        await update.message.reply_text(
            LANGUAGES[lang]["risk_info"].format(
                symbol=symbol,
                volatility=volatility,
                risk_level=risk_level
            )
        )

        plt.figure(figsize=(10, 5))
        returns.plot(kind='line', title=f"{symbol} Returns")
        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        plt.close()
        await update.message.reply_photo(photo=buf)

    except Exception as e:
        logger.error(f"Risk analysis failed: {e}")
        await update.message.reply_text(f"Error: {str(e)}")


# ==================== –°–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ—â–∏ ====================
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    user_id = update.effective_user.id
    lang = user_data.get(user_id, {}).get('language', 'en')

    keyboard = [
        [InlineKeyboardButton(
            "Portfolio Help" if lang == "en" else
            "–ü–æ–º–æ—â—å –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é",
            callback_data="help_portfolio")],
        [InlineKeyboardButton(
            "Risk Help" if lang == "en" else
            "–ü–æ–º–æ—â—å –ø–æ —Ä–∏—Å–∫—É",
            callback_data="help_risk")],
        [InlineKeyboardButton(
            "Dividend Help" if lang == "en" else
            "–ü–æ–º–æ—â—å –ø–æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞–º",
            callback_data="help_dividend")]
    ]

    await update.message.reply_text(
        LANGUAGES[lang]["help_text"],
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )


async def help_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ–º–æ—â–∏"""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    lang = user_data.get(user_id, {}).get('language', 'en')

    help_type = query.data.split("_")[1]
    text = LANGUAGES[lang][f"help_{help_type}"]

    await query.edit_message_text(
        text=text,
        parse_mode="HTML"
    )


# ==================== –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ====================
def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token("8143486168:AAF5pDrwsSoSHzacJY3HJI9fipjA56ptX0c").build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    cmd_handlers = [
        CommandHandler("start", start),
        CommandHandler("help", help_command),
        CommandHandler("language", set_language),
        CommandHandler("dividend", dividend),
        CommandHandler("add", add_to_portfolio),
        CommandHandler("portfolio", show_portfolio),
        CommandHandler("learn", start_education),
        CommandHandler("risk", analyze_risk)
    ]
    for handler in cmd_handlers:
        application.add_handler(handler)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–ª–ª–±—ç–∫–æ–≤
    callback_handlers = [
        CallbackQueryHandler(handle_language, pattern="^lang_"),
        CallbackQueryHandler(dividend_chart, pattern="^chart_"),
        CallbackQueryHandler(show_lesson, pattern="^lesson_"),
        CallbackQueryHandler(help_button_handler, pattern="^help_")
    ]
    for handler in callback_handlers:
        application.add_handler(handler)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        handle_language
    ))

    application.run_polling()


if __name__ == '__main__':
    main()
